/*
 * Chris Addiego, 11/2/16
 *
 * This script opens a series of CBED patterns and generates an image by summing
 * intensity form a specific sector of the image. 
 * Different types of images can be generated by adjusting the shape of the mask
 * that is applied to each CBED pattern.
 */


/* sectorMask - generates a mask the same size as the given image
 * 	that is a sector of a circle centered on (cenRow, cenCol). The angular
 *  extent of the sector must also be defined with angleStart and angleRange.
 */
image sectorMask(image im, number cenRow, number cenCol, number CBEDradius, \
	number maskRadius, number angleStart, number angleEnd){
	
	number r = CBEDradius;
	image mask = im * 0;
	
	mask[cenRow - r, cenCol - r, cenRow + r, cenCol + r] = \
		((iradius <= maskRadius) && (itheta >= angleStart) && \
		(itheta <= angleEnd))? 1 : 0;
	
	return mask;
}

/* annularMask - generates an annular mask the same size as the given image 
 * 	and centered on (cenRow,cenCol). Inner radius, outer radius, and angular extent
 * 	must also be defined
 */
image annularMask(image im, number cenRow, number cenCol, number CBEDradius, \
	number innerRadius, number outerRadius, number angleStart,\
	number angleEnd){

	image outer:= sectorMask(im, cenRow, cenCol, CBEDradius, outerRadius, angleStart, angleEnd);
	image inner:= sectorMask(im, cenRow, cenCol, CBEDradius, innerRadius, angleStart, angleEnd);
	return (outer - inner);
}

/* main - generates a 16x16 image based on a series of CBED patterns.
 * 	The function is currently configured to generate a bright field image. 
 * 	Input: 
 *		stem - the full path to the series of CBED images and the filename prefix.
 * 		   files names must be in the form: prefix_0000.dm4
 * 		CBEDr - the center row (y-position) of the CBED patterns
 * 		CBEDc - the center column (x-position) of the CBED patterns
 * 		CBEDradius - the radius of the CBED pattern
 */
void main(string stem, number CBEDr, number CBEDc, number CBEDradius){

	//defining the size of the image that will be generated
	number nRows = 16;
	number nCols = 16;
	image newImg := realImage("", 4, nRows, nCols);

	//showing an example of where the mask is located on the image
	image prototype := OpenImage(stem + "_0000.dm4");

	// generating an sector  mask offset to the center of the CBED pattern
	// adjust this code to get different sectors or to switch to annular masks
	number maskRadius = 50; 
	number angleStart = -pi(); 
	number angleEnd = pi(); 
	image mask1 = sectorMask(prototype, CBEDr, CBEDc, CBEDradius, \
		maskRadius, maskRadius + 10, angleStart, angleEnd);
	
	// show the prototype CBED pattern and the masked region
	ShowImage(mask1 * prototype);
	prototype.showImage();

	//Looping through all pixels to generate an image
	for(number r = 0 ; r < nRows; r++){
		for(number c = 0; c < nCols ; c++){
		
			//Identifying CBED image file corresponding to pixel at (r,c)
			number nPix = nRows * r + c;
			string pixName;
			if(nPix < 10) pixName = "000" + nPix;
			else if(nPix < 100) pixName = "00" + nPix;
			else pixName = "0" + nPix;
			
			//Opening corresponding image and summing intensity
			string name = stem + "_" + pixName + ".dm4";
			image img := OpenImage(name);
			newImg[r,c] = sum(mask1 * img)
		}
	}

	newImg.showImage();
}

string pathAndPrefix = "C:\\Users\\650-440-2399\\Desktop\\gatan_test\\Second_01\\test_scan_cbed_Hour_00_Minute_00_Second_01_Frame";
number centerRow = 236;
number centerCol = 222;
number radius = 85

main(pathAndPrefix, centerRow, centerCol, radius);

